import type { ClientConfig, IFluenceClient, RelayOptions, ConnectionState } from '@fluencelabs/interfaces';
import { callAquaFunction } from './compilerSupport/callFunction.js';
import { registerService } from './compilerSupport/registerService.js';
declare const createClient: (relay: RelayOptions, config: ClientConfig) => Promise<IFluenceClient>;
/**
 * Public interface to Fluence Network
 */
export declare const Fluence: {
    defaultClient: IFluenceClient | undefined;
    /**
     * Connect to the Fluence network
     * @param relay - relay node to connect to
     * @param config - client configuration
     */
    connect: (relay: RelayOptions, config: ClientConfig) => Promise<void>;
    /**
     * Disconnect from the Fluence network
     */
    disconnect: () => Promise<void>;
    /**
     * Handle connection state changes. Immediately returns the current connection state
     */
    onConnectionStateChange(handler: (state: ConnectionState) => void): ConnectionState;
    /**
     * Low level API. Get the underlying client instance which holds the connection to the network
     * @returns IFluenceClient instance
     */
    getClient: () => Promise<IFluenceClient>;
};
export type { IFluenceClient, ClientConfig, CallParams } from '@fluencelabs/interfaces';
export type { ArrayType, ArrowType, ArrowWithCallbacks, ArrowWithoutCallbacks, BottomType, FunctionCallConstants, FunctionCallDef, LabeledProductType, NilType, NonArrowType, OptionType, ProductType, ScalarNames, ScalarType, ServiceDef, StructType, TopType, UnlabeledProductType, CallAquaFunctionType, CallAquaFunctionArgs, PassedArgs, FnConfig, RegisterServiceType, RegisterServiceArgs, } from '@fluencelabs/interfaces';
export { v5_callFunction, v5_registerService } from './api.js';
export { createClient, callAquaFunction, registerService };
export { getFluenceInterface, getFluenceInterfaceFromGlobalThis } from './util/loadClient.js';
