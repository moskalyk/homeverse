import { PeerIdB58 } from '@fluencelabs/interfaces';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { Multiaddr } from '@multiformats/multiaddr';
import { Subject } from 'rxjs';
import { IConnection } from './interfaces.js';
import { IParticle } from '../particle/interfaces.js';
export declare const PROTOCOL_NAME = "/fluence/particle/2.0.0";
/**
 * Options to configure fluence relay connection
 */
export interface RelayConnectionConfig {
    /**
     * Peer id of the Fluence Peer
     */
    peerId: PeerId;
    /**
     * Multiaddress of the relay to make connection to
     */
    relayAddress: Multiaddr;
    /**
     * The dialing timeout in milliseconds
     */
    dialTimeoutMs?: number;
    /**
     * The maximum number of inbound streams for the libp2p node.
     * Default: 1024
     */
    maxInboundStreams: number;
    /**
     * The maximum number of outbound streams for the libp2p node.
     * Default: 1024
     */
    maxOutboundStreams: number;
}
/**
 * Implementation for JS peers which connects to Fluence through relay node
 */
export declare class RelayConnection implements IConnection {
    private config;
    private relayAddress;
    private lib2p2Peer;
    constructor(config: RelayConnectionConfig);
    getRelayPeerId(): string;
    supportsRelay(): boolean;
    particleSource: Subject<IParticle>;
    start(): Promise<void>;
    stop(): Promise<void>;
    sendParticle(nextPeerIds: PeerIdB58[], particle: IParticle): Promise<void>;
    private connect;
}
