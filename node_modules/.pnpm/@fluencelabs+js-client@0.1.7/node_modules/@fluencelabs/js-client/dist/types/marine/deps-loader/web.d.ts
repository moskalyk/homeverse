/// <reference types="node" resolution-mode="require"/>
import { Buffer } from 'buffer';
import { LazyLoader } from '../interfaces.js';
import type { WorkerImplementation } from 'threads/dist/types/master';
/**
 * Load wasm file from the server. Only works in browsers.
 * The function will try load file into SharedArrayBuffer if the site is cross-origin isolated.
 * Otherwise the return value fallbacks to Buffer which is less performant but is still compatible with FluenceAppService methods.
 * We strongly recommend to set-up cross-origin headers. For more details see: See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements
 * Filename is relative to current origin.
 * @param filePath - path to the wasm file relative to current origin
 * @returns Either SharedArrayBuffer or Buffer with the wasm file
 */
export declare const loadWasmFromUrl: (filePath: string) => Promise<SharedArrayBuffer | Buffer>;
export declare class WasmLoaderFromUrl extends LazyLoader<SharedArrayBuffer | Buffer> {
    constructor(filePath: string);
}
export declare class WorkerLoaderFromUrl extends LazyLoader<WorkerImplementation> {
    constructor(scriptPath: string);
}
