import { CallServiceData, CallServiceResult, GenericCallServiceHandler, IJsServiceHost } from './interfaces.js';
export declare class JsServiceHost implements IJsServiceHost {
    private particleScopeHandlers;
    private commonHandlers;
    /**
     * Returns true if any handler for the specified serviceId is registered
     */
    hasService(serviceId: string): boolean;
    /**
     * Removes all handlers associated with the specified particle scope
     * @param particleId Particle ID to remove handlers for
     */
    removeParticleScopeHandlers(particleId: string): void;
    /**
     * Find call service handler for specified particle
     * @param serviceId Service ID as specified in `call` air instruction
     * @param fnName Function name as specified in `call` air instruction
     * @param particleId Particle ID
     */
    getHandler(serviceId: string, fnName: string, particleId: string): GenericCallServiceHandler | null;
    /**
     * Execute service call for specified call service data. Return null if no handler was found
     */
    callService(req: CallServiceData): Promise<CallServiceResult | null>;
    /**
     * Register handler for all particles
     */
    registerGlobalHandler(serviceId: string, fnName: string, handler: GenericCallServiceHandler): void;
    /**
     * Register handler which will be called only for particle with the specific id
     */
    registerParticleScopeHandler(particleId: string, serviceId: string, fnName: string, handler: GenericCallServiceHandler): void;
}
