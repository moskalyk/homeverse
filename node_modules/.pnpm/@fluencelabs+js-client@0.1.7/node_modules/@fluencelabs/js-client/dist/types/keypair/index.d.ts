import type { PeerId } from '@libp2p/interface/peer-id';
import type { PrivateKey } from '@libp2p/interface/keys';
import { KeyPairOptions } from '@fluencelabs/interfaces';
export declare class KeyPair {
    private key;
    private libp2pPeerId;
    /**
     * Key pair in libp2p format. Used for backward compatibility with the current FluencePeer implementation
     */
    getLibp2pPeerId(): PeerId;
    constructor(key: PrivateKey, libp2pPeerId: PeerId);
    /**
     * Generates new KeyPair from ed25519 private key represented as a 32 byte array
     * @param seed - Any sequence of 32 bytes
     * @returns - Promise with the created KeyPair
     */
    static fromEd25519SK(seed: Uint8Array): Promise<KeyPair>;
    /**
     * Generates new KeyPair with a random secret key
     * @returns - Promise with the created KeyPair
     */
    static randomEd25519(): Promise<KeyPair>;
    getPeerId(): string;
    /**
     * @returns 32 byte private key
     */
    toEd25519PrivateKey(): Uint8Array;
    signBytes(data: Uint8Array): Promise<Uint8Array>;
    verify(data: Uint8Array, signature: Uint8Array): Promise<boolean>;
}
export declare const fromBase64Sk: (sk: string) => Promise<KeyPair>;
export declare const fromBase58Sk: (sk: string) => Promise<KeyPair>;
export declare const fromOpts: (opts: KeyPairOptions) => Promise<KeyPair>;
