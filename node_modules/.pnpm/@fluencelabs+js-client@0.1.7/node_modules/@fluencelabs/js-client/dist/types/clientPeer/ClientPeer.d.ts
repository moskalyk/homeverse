import { ClientConfig, ConnectionState, IFluenceClient, RelayOptions } from '@fluencelabs/interfaces';
import { RelayConnectionConfig } from '../connection/RelayConnection.js';
import { KeyPair } from '../keypair/index.js';
import { FluencePeer, PeerConfig } from '../jsPeer/FluencePeer.js';
import { IMarineHost } from '../marine/interfaces.js';
export declare const makeClientPeerConfig: (relay: RelayOptions, config: ClientConfig) => Promise<{
    peerConfig: PeerConfig;
    relayConfig: RelayConnectionConfig;
    keyPair: KeyPair;
}>;
export declare class ClientPeer extends FluencePeer implements IFluenceClient {
    constructor(peerConfig: PeerConfig, relayConfig: RelayConnectionConfig, keyPair: KeyPair, marine: IMarineHost);
    getPeerId(): string;
    getPeerSecretKey(): Uint8Array;
    connectionState: ConnectionState;
    connectionStateChangeHandler: (state: ConnectionState) => void;
    getRelayPeerId(): string;
    onConnectionStateChange(handler: (state: ConnectionState) => void): ConnectionState;
    private changeConnectionState;
    /**
     * Connect to the Fluence network
     */
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
}
