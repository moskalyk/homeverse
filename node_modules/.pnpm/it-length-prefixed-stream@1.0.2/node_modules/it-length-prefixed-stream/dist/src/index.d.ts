/**
 * @packageDocumentation
 *
 * This module makes it easy to send and receive length-prefixed byte arrays over
 * streams.
 *
 * @example
 *
 * ```typescript
 * import { lpStream } from 'it-length-prefixed-stream'
 *
 * const stream = lpStream(duplex)
 *
 * // read the next length-prefixed chunk
 * const bytes = await stream.read()
 *
 * // write a length-prefixed chunk
 * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))
 * ```
 */
import * as lp from 'it-length-prefixed';
import { Uint8ArrayList } from 'uint8arraylist';
import type { Duplex } from 'it-stream-types';
export interface AbortOptions {
    signal?: AbortSignal;
}
export interface LengthPrefixedStream<Stream = unknown> {
    /**
     * Read the next length-prefixed number of bytes from the stream
     */
    read: (options?: AbortOptions) => Promise<Uint8ArrayList>;
    /**
     * Write the passed bytes to the stream prefixed by their length
     */
    write: (input: Uint8Array | Uint8ArrayList, options?: AbortOptions) => Promise<void>;
    /**
     * Returns the underlying stream
     */
    unwrap: () => Stream;
}
export interface LengthPrefixedStreamOpts {
    lengthEncoder: lp.LengthEncoderFunction;
    lengthDecoder: lp.LengthDecoderFunction;
    maxLengthLength: number;
    maxDataLength: number;
}
export declare function lpStream<Stream extends Duplex<any, any, any>>(duplex: Stream, opts?: Partial<LengthPrefixedStreamOpts>): LengthPrefixedStream<Stream>;
//# sourceMappingURL=index.d.ts.map