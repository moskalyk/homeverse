import { config } from 'dotenv';
config();
import { Fluence, ClientConfig } from "@fluencelabs/js-client";
// dotenv.config()
// import { Fluence, ClientConfig, } from "@fluencelabs/js-client/";

//   import {
//     generateKeyPairFromSeed,
//     generateKeyPair,
//     unmarshalPublicKey,
//   } from "@libp2p/crypto/keys";
//   import type { PrivateKey, PublicKey } from "@libp2p/interface/keys";
//   import type { PeerId } from "@libp2p/interface/peer-id";
//   import { createFromPrivKey } from "@libp2p/peer-id-factory";
//   import bs58 from "bs58";
//   import { toUint8Array } from "js-base64";
  
//   import { KeyPairOptions } from "../clientPeer/types.js";
  
//   export class KeyPair {
//     private publicKey: PublicKey;
  
//     private constructor(
//       private privateKey: PrivateKey,
//       private libp2pPeerId: PeerId,
//     ) {
//       this.publicKey = privateKey.public;
//     }
  
//     /**
//      * Key pair in libp2p format. Used for backward compatibility with the current FluencePeer implementation
//      */
//     getLibp2pPeerId() {
//       return this.libp2pPeerId;
//     }
  
//     /**
//      * Return public key inferred from private key
//      */
//     getPublicKey() {
//       return this.publicKey.bytes;
//     }
  
//     /**
//      * Generates new KeyPair from ed25519 private key represented as a 32 byte array
//      * @param seed - Any sequence of 32 bytes
//      * @returns - Promise with the created KeyPair
//      */
//     static async fromEd25519SK(seed: Uint8Array): Promise<KeyPair> {
//       const key = await generateKeyPairFromSeed("Ed25519", seed, 256);
//       const lib2p2Pid = await createFromPrivKey(key);
//       return new KeyPair(key, lib2p2Pid);
//     }
  
//     /**
//      * Generates new KeyPair with a random secret key
//      * @returns - Promise with the created KeyPair
//      */
//     static async randomEd25519(): Promise<KeyPair> {
//       const key = await generateKeyPair("Ed25519");
//       const lib2p2Pid = await createFromPrivKey(key);
//       return new KeyPair(key, lib2p2Pid);
//     }
  
//     static verifyWithPublicKey(
//       publicKey: Uint8Array,
//       message: Uint8Array,
//       signature: Uint8Array,
//     ) {
//       return unmarshalPublicKey(publicKey).verify(message, signature);
//     }
  
//     getPeerId(): string {
//       return this.libp2pPeerId.toString();
//     }
  
//     /**
//      * @returns 32 byte private key
//      */
//     toEd25519PrivateKey(): Uint8Array {
//       return this.privateKey.marshal().subarray(0, 32);
//     }
  
//     signBytes(data: Uint8Array): Promise<Uint8Array> {
//       return this.privateKey.sign(data);
//     }
  
//     verify(data: Uint8Array, signature: Uint8Array): Promise<boolean> {
//       return this.publicKey.verify(data, signature);
//     }
//   }
  
//   export const fromBase64Sk = (sk: string): Promise<KeyPair> => {
//     const skArr = toUint8Array(sk);
//     return KeyPair.fromEd25519SK(skArr);
//   };
  
//   export const fromBase58Sk = (sk: string): Promise<KeyPair> => {
//     const skArr = bs58.decode(sk);
//     return KeyPair.fromEd25519SK(skArr);
//   };
  
//   export const fromOpts = (opts: KeyPairOptions): Promise<KeyPair> => {
//     if (opts.source === "random") {
//       return KeyPair.randomEd25519();
//     }
  
//     return KeyPair.fromEd25519SK(opts.source);
//   };

const nodes = [
    {
      "peerId": "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN",
      "multiaddr": "/ip4/127.0.0.1/tcp/9991/ws/p2p/12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN"
    },
    {
      "peerId": "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z",
      "multiaddr": "/ip4/127.0.0.1/tcp/9992/ws/p2p/12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z"
    },
    {
      "peerId": "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip",
      "multiaddr": "/ip4/127.0.0.1/tcp/9993/ws/p2p/12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip"
    }
  ];

function stringChecksum(str: any) {
    let sum = 0;
    for (let i = 0; i < str.length; i++) {
        sum += str.charCodeAt(i);
    }
    return sum % 255;
}

(async () => {
    // create a 32 lengthed array from 0-255
    const spaces = [
        {
            name: 'closet_1'
        },{
            name: 'closet_2'
        },{
            name: 'bathroom'
        },{
            name: 'livingroom_1' // 0xwolf
        },{
            name: 'livingroom_2'
        },{
            name: 'livingroom_3'
        },{
            name: 'livingroom_4'
        },{
            name: 'livingroom_5'
        },{
            name: 'diningroom'
        },{
            name: 'kitchen'
        },{
            name: 'window_1'
        },{
            name: 'window_2'
        },{
            name: 'window_3'
        },{
            name: 'window_4'
        },{
            name: 'window_5'
        }
    ]


    const library: any = {
        0: 'üÉü',
        1: '‚öö',
        2: '‚ôï',
        3: '‚öò',
        4: '‚ôñ',
        5: '‚ôî',
        6: '‚òÇ',
        7: '‚ôò',
        8: '‚òÆ',
        9: '‚òØ',
        10: '‚ò∏',
        11: '‚öñ',
        12: '‚ô±',
        13: '‚ò†',
        14: '‚ôª',
        15: '‚ò¢',
        16: '‚òñ',
        17: '‚òÖ',
        18: '‚òΩ',
        19: '‚òº',
        20: '‚ö±',
        21: '‚ö¨',
        22: '‚àÖ',
        23: 'RED',
        24: 'ORANGE',
        25: 'YELLOW',
        26: 'GREEN',
        27: 'CYAN',
        28: '‚ó®',
        29: '‚ùç',
        30: '‚òâ',
        31: '‚òø',
        32: '‚ôÄ',
        33: '‚ôÅ',
        34: '‚ôÇ',
        35: '‚ö≥',
        36: '‚ôÉ',
        37: '‚ôÑ',
        38: '‚ôÖ',
        39: '‚ôÜ',
        40: '‚ôá',
        41: '‚öÄ',
        42: 'Birch êÇ∑ BEITH',
        43: 'Rowan êÇ∑ LUIS',
        44: 'Alder êÇ∑ FEARN',
        45: 'Willow êÇ∑ SAILLE',
        46: 'Ash êÇ∑ NUIN',
        47: 'Hawthon êÇ∑ HUATHE',
        48: 'Oak êÇ∑ DUIR',
        49: 'Holly êÇ∑ TINNE',
        50: 'Hazel êÇ∑ COLL',
        51: 'Apple êÇ∑ QUERT',
        52: 'Vine êÇ∑ MUIN',
        53: 'Ivy êÇ∑ GORT',
        54: 'Reed êÇ∑ NGETAL',
        55: 'Blackthorn êÇ∑ STRAIF',
        56: 'Elder êÇ∑ RUIS',
        57: 'Silver Fir êÇ∑ AILIM',
        58: 'Furze êÇ∑ OHN',
        59: 'Heather êÇ∑ UR',
        60: 'Poplar êÇ∑ EADHA',
        61: 'Yew êÇ∑ IOHO',
        62: 'The Grove êÇ∑ KOAD',
        63: 'Spindle êÇ∑ OIR',
        64: 'Honeysuckle êÇ∑ UNILEAND',
        65: 'Beech êÇ∑ PHAGOS',
        66: 'The Sea êÇ∑ MOR',
        67: '‚öÅ',
        68: 'The Self ·õó MANNAZ',
        69: 'Partnership ·ö∑ GEBO',
        70: 'Signals ·ö´ ANSUZ',
        71: 'Seperation ·õü OTHILA',
        72: 'Strength ·ö¢ URUZ',
        73: 'Initiatian ·õà PERTH',
        74: 'Constraint ·öæ NAUTHIZ',
        75: 'Fertility ·õù INGUZ',
        76: 'Defense ·õá EIHWAZ',
        77: 'Protection ·õâ ALGIZ',
        78: 'Posessions ·õì FEHU',
        79: 'Joy ·öπ WUNJO',
        80: 'Harvest ·õÉ JERA',
        81: 'Opening ·ö≤ KANO',
        82: 'Warrior ·õè TEIWAZ',
        83: 'Growth ·õí BERKANA',
        84: 'Movement ·õñ EHWAZ',
        85: 'Flow ·õê LAGUZ',
        86: 'Disruption ·ö∫ HAGALAZ',
        87: 'Journey ·ö± RAIDO',
        88: 'Gateway ·ö¶ THURISAZ',
        89: 'Breakthrough ·õû DAGAZ',
        90: 'Standstill ·õÅ ISA',
        91: 'Wholeness ·õ≤ SOWELU',
        92: 'Unknowable  ODIN',
        93: '‚öÇ',
        94: 'üúÅ',
        95: 'üúÇ',
        96: 'üúÉ',
        97: 'üúÑ',
        98: '‚öÉ',
        99: '‰∑Ä',
        100: '‰∑Å',
        101: '‰∑Ç',
        102: '‰∑É',
        103: '‰∑Ñ',
        104: '‰∑Ö',
        105: '‰∑Ü',
        106: '‰∑á',
        107: '‰∑à',
        108: '‰∑â',
        109: '‰∑ä',
        110: '‰∑ã',
        111: '‰∑å',
        112: '‰∑ç',
        113: '‰∑é',
        114: '‰∑è',
        115: '‰∑ê',
        116: '‰∑ë',
        117: '‰∑í',
        118: '‰∑ì',
        119: '‰∑î',
        120: '‰∑ï',
        121: '‰∑ñ',
        122: '‰∑ó',
        123: '‰∑ò', // 25
        124: '‰∑ô',
        125: '‰∑ö',
        126: '‰∑õ',
        127: '‰∑ú',
        128: '‰∑ù',
        129: '‰∑û',
        130: '‰∑ü',
        131: '‰∑†',
        132: '‰∑°',
        133: '‰∑¢',
        134: '‰∑£',
        135: '‰∑§',
        136: '‰∑•',
        137: '‰∑¶',
        138: '‰∑ß', // 40
        139: '‰∑®',
        140: '‰∑©',
        141: '‰∑™',
        142: '‰∑´',
        143: '‰∑¨',
        144: '‰∑≠',
        145: '‰∑Æ',
        146: '‰∑Ø',
        147: '‰∑∞',
        148: '‰∑±', // 50
        149: '‰∑≤',
        150: '‰∑≥',
        151: '‰∑¥',
        152: '‰∑µ',
        153: '‰∑∂',
        154: '‰∑∑',
        155: '‰∑∏',
        156: '‰∑π', /// 58
        157: '‰∑∫',
        158: '‰∑ª',
        159: '‰∑º',
        160: '‰∑Ω',
        161: '‰∑æ',
        162: '‰∑ø',
        163: '¬§',
        164: 'üÉï',
        165: 'üÇ¢',
        166: 'üÉâ',
        167: 'üÇæ',
        168: 'üÉÉ',
        169: 'üÇ£',
        170: 'üÉã',
        171: 'üÇ∂',
        172: 'üÉç',
        173: 'üÇÆ',
        174: 'üÉû',
        175: 'üÇ™',
        176: 'MOONSTONE',
        177: 'LAPIS_LAZULI',
        178: 'FLOWER_AGATE',
        179: 'MOSS_AGATE',
        180: 'SHAKTI',
        181: 'SUNSTONE',
        182: 'HEMATITE',
        183: 'AQUAMARINE',
        184: 'MALACHITE',
        185: 'ARAGONITE',
        186: 'BLACK_TOURMALINE',
        187: 'TOURQUISE',
        188: 'CALCITE',
        189: 'ROSE_QUARTZ',
        190: 'FLOURITE',
        191: 'PINK_AMETHYST',
        192: 'SMOKY_AMAZONITE',
        193: 'CITRINE',
        194: 'PEACH_SELENITE',
        195: 'SUPER_SEVEN',
        196: 'LABRADORITE',
        197: 'LARIMAR',
        198: 'LACE_AGATE',
        199: 'PYRITE',
        200: 'RED_JASPER',
        201: 'APOPHYLLITE',
        202: 'OPAL',
        203: 'EMERALD',
        204: 'HERKIMER_DIAMOND',
        205: 'AZURITE',
        206: 'AMMONITE',
        207: 'DESERT_JASPER',
        208: 'SPIRIT_QUARTZ',
        209: '‚öÑ',
        210: '‚òå',
        211: '‚öØ',
        212: '‚ñ°',
        213: '‚ôàÔ∏é',
        214: '‚öπ',
        215: '‚öØ',
        216: '‚ñ°',
        217: 'WOOD',
        218: 'METAL',
        219: '‚á†',
        220: '‚á°',
        221: '‚á¢',
        222: '‚á£',
        223: 'Í©ú',
        224: '‚ùÄ',
        225: 'ëóò',
        226: '‚ô°',
        227: '‚ñ≤',
        228: 'FRIDAY',
        229: '‚öÖ',
        230: 'WOLF',
        231: 'CAT',
        232: 'ROOSTER',
        233: 'COW',
        234: 'BUFFALO',
        235: 'SPIDER',
        236: 'HORSE',
        237: 'SNAKE',
        238: 'FISH',
        239: 'FOX',
        240: 'BAT',
        241: 'MONKEY',
        242: 'TURTLE',
        243: 'BIRD',
        244: 'GOAT',
        245: 'MALKUTH',
        246: 'YESOD',
        247: 'HOD',
        248: 'NETZACH',
        249: 'TIPARETH',
        250: 'GEBURH',
        251: 'CHESED',
        252: 'DAATH',
        253: 'BINAH',
        254: 'CHOKMAH',
        255: 'KETER'
      }

    // Check if pkey exists in .env
    // if (process.env.pkey) {
        // console.log('Private key already exists in .env file.');
        const keys: any = []
        spaces.map((space: any) => {
            console.log(process.env[space])
            keys.push(process.env[space.name])
        })
        // return spaces;
    // }

    console.log(keys)
    for(let i = 0; i < spaces.length; i++){
        await Fluence.connect(nodes[0].multiaddr, {
            keyPair: { type: 'Ed25519', source: keys[i] }
        } as ClientConfig);
        const input = (await Fluence.getClient()).getPeerId();
        console.log('~~~~~~~')
        console.log(spaces[i])
        console.log(stringChecksum(input),'~' ,library[stringChecksum(input)]);
        console.log('connected ', input)
    }
})()