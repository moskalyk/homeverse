import { FluencePeer } from '../jsPeer/FluencePeer.js';
import { Particle } from '../particle/Particle.js';
import { ClientConfig, IFluenceClient, RelayOptions, ServiceDef } from '@fluencelabs/interfaces';
import { KeyPair } from '../keypair/index.js';
import { ClientPeer } from '../clientPeer/ClientPeer.js';
import { IConnection } from '../connection/interfaces.js';
export declare const registerHandlersHelper: (peer: FluencePeer, particle: Particle, handlers: Record<string, Record<string, any>>) => void;
export declare type CompiledFnCall = (peer: IFluenceClient, args: {
    [key: string]: any;
}) => Promise<unknown>;
export declare type CompiledFile = {
    functions: {
        [key: string]: CompiledFnCall;
    };
    services: {
        [key: string]: ServiceDef;
    };
};
export declare const compileAqua: (aquaFile: string) => Promise<CompiledFile>;
export declare class TestPeer extends FluencePeer {
    constructor(keyPair: KeyPair, connection: IConnection);
}
export declare const mkTestPeer: () => Promise<TestPeer>;
export declare const withPeer: (action: (p: FluencePeer) => Promise<void>) => Promise<void>;
export declare const withClient: (relay: RelayOptions, config: ClientConfig, action: (client: ClientPeer) => Promise<void>) => Promise<void>;
