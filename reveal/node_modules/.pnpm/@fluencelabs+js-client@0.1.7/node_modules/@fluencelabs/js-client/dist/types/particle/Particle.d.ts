import { CallResultsArray } from '@fluencelabs/avm';
import { IParticle } from './interfaces.js';
export declare class Particle implements IParticle {
    readonly id: string;
    readonly timestamp: number;
    readonly script: string;
    readonly data: Uint8Array;
    readonly ttl: number;
    readonly initPeerId: string;
    readonly signature: undefined;
    constructor(id: string, timestamp: number, script: string, data: Uint8Array, ttl: number, initPeerId: string);
    static createNew(script: string, initPeerId: string, ttl: number): Particle;
    static fromString(str: string): Particle;
}
/**
 * Returns actual ttl of a particle, i.e. ttl - time passed since particle creation
 */
export declare const getActualTTL: (particle: IParticle) => number;
/**
 * Returns true if particle has expired
 */
export declare const hasExpired: (particle: IParticle) => boolean;
/**
 * Creates a particle clone with new data
 */
export declare const cloneWithNewData: (particle: IParticle, newData: Uint8Array) => IParticle;
/**
 * Creates a deep copy of a particle
 */
export declare const fullClone: (particle: IParticle) => IParticle;
/**
 * Serializes particle into string suitable for sending through network
 */
export declare const serializeToString: (particle: IParticle) => string;
/**
 * When particle is executed, it goes through different stages. The type describes all possible stages and their parameters
 */
export declare type ParticleExecutionStage = {
    stage: 'received';
} | {
    stage: 'interpreted';
} | {
    stage: 'interpreterError';
    errorMessage: string;
} | {
    stage: 'localWorkDone';
} | {
    stage: 'sent';
} | {
    stage: 'sendingError';
    errorMessage: string;
} | {
    stage: 'expired';
};
/**
 * Particle queue item is a wrapper around particle, which contains additional information about particle execution
 */
export interface ParticleQueueItem {
    particle: IParticle;
    callResults: CallResultsArray;
    onStageChange: (state: ParticleExecutionStage) => void;
}
/**
 * Helper function to handle particle at expired stage
 */
export declare const handleTimeout: (fn: () => void) => (stage: ParticleExecutionStage) => void;
