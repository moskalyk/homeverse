import { CallParams, PeerIdB58 } from '@fluencelabs/interfaces';
import { KeyPair } from '../keypair/index.js';
import { FluencePeer } from '../jsPeer/FluencePeer.js';
import { SigDef } from './_aqua/services.js';
import { SecurityGuard } from './securityGuard.js';
export declare const defaultSigGuard: (peerId: PeerIdB58) => SecurityGuard<"data">;
export declare class Sig implements SigDef {
    private keyPair;
    constructor(keyPair: KeyPair);
    /**
     * Configurable security guard for sign method
     */
    securityGuard: SecurityGuard<'data'>;
    /**
     * Gets the public key of KeyPair. Required by aqua
     */
    get_peer_id(): string;
    /**
     * Signs the data using key pair's private key. Required by aqua
     */
    sign(data: number[], callParams: CallParams<'data'>): Promise<{
        error: string | null;
        signature: number[] | null;
        success: boolean;
    }>;
    /**
     * Verifies the signature. Required by aqua
     */
    verify(signature: number[], data: number[]): Promise<boolean>;
}
export declare const getDefaultSig: (peer: FluencePeer) => void;
