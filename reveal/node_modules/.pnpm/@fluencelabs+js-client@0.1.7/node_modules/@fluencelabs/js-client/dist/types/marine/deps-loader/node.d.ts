import type { WorkerImplementation } from 'threads/dist/types/master';
import { LazyLoader } from '../interfaces.js';
/**
 * Load wasm file from npm package. Only works in nodejs environment.
 * The function returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param source - object specifying the source of the file. Consist two fields: package name and file path.
 * @returns SharedArrayBuffer with the wasm file
 */
export declare const loadWasmFromNpmPackage: (source: {
    package: string;
    file: string;
}) => Promise<SharedArrayBuffer>;
/**
 * Load wasm file from the file system. Only works in nodejs environment.
 * The functions returns SharedArrayBuffer compatible with FluenceAppService methods.
 * @param filePath - path to the wasm file
 * @returns SharedArrayBuffer with the wasm fileWorker
 */
export declare const loadWasmFromFileSystem: (filePath: string) => Promise<SharedArrayBuffer>;
export declare class WasmLoaderFromFs extends LazyLoader<SharedArrayBuffer> {
    constructor(filePath: string);
}
export declare class WasmLoaderFromNpm extends LazyLoader<SharedArrayBuffer> {
    constructor(pkg: string, file: string);
}
export declare class WorkerLoaderFromFs extends LazyLoader<WorkerImplementation> {
    constructor(scriptPath: string);
}
export declare class WorkerLoaderFromNpm extends LazyLoader<WorkerImplementation> {
    constructor(pkg: string, file: string);
}
