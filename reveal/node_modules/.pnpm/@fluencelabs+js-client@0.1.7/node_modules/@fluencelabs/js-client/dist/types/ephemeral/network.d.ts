import { PeerIdB58 } from '@fluencelabs/interfaces';
import { WorkerLoaderFromFs } from '../marine/deps-loader/node.js';
import { Subject } from 'rxjs';
import { Particle } from '../particle/Particle.js';
import { WasmLoaderFromNpm } from '../marine/deps-loader/node.js';
import { IConnection } from '../connection/interfaces.js';
interface EphemeralConfig {
    peers: Array<{
        peerId: PeerIdB58;
        sk: string;
    }>;
}
export declare const defaultConfig: {
    peers: {
        peerId: string;
        sk: string;
    }[];
};
export interface IEphemeralConnection extends IConnection {
    readonly selfPeerId: PeerIdB58;
    readonly connections: Map<PeerIdB58, IEphemeralConnection>;
    receiveParticle(particle: Particle): void;
}
export declare class EphemeralConnection implements IEphemeralConnection {
    readonly selfPeerId: PeerIdB58;
    readonly connections: Map<PeerIdB58, IEphemeralConnection>;
    constructor(selfPeerId: PeerIdB58);
    start(): Promise<void>;
    stop(): Promise<void>;
    connectToOther(other: IEphemeralConnection): void;
    disconnectFromOther(other: IEphemeralConnection): void;
    disconnectFromAll(): void;
    particleSource: Subject<Particle>;
    receiveParticle(particle: Particle): void;
    sendParticle(nextPeerIds: string[], particle: Particle): Promise<void>;
    getRelayPeerId(): string;
    supportsRelay(): boolean;
}
/**
 * Ephemeral network implementation.
 * Ephemeral network is a virtual network which runs locally and focuses on p2p interaction by removing connectivity layer out of the equation.
 */
export declare class EphemeralNetwork {
    readonly config: EphemeralConfig;
    private peers;
    workerLoader: WorkerLoaderFromFs;
    controlModuleLoader: WasmLoaderFromNpm;
    avmModuleLoader: WasmLoaderFromNpm;
    constructor(config: EphemeralConfig);
    /**
     * Starts the Ephemeral network up
     */
    up(): Promise<void>;
    /**
     * Shuts the ephemeral network down. Will disconnect all connected peers.
     */
    down(): Promise<void>;
    /**
     * Gets a relay connection to the specified peer.
     */
    getRelayConnection(peerId: PeerIdB58, relayPeerId: PeerIdB58): IConnection;
}
export {};
