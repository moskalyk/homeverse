import peek from 'it-peekable';
function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
function filter(source, fn) {
    if (isAsyncIterable(source)) {
        return (async function* () {
            for await (const entry of source) {
                if (await fn(entry)) {
                    yield entry;
                }
            }
        })();
    }
    // if mapping function returns a promise we have to return an async generator
    const peekable = peek(source);
    const { value, done } = peekable.next();
    if (done === true) {
        return (function* () { }());
    }
    const res = fn(value);
    // @ts-expect-error .then is not present on O
    if (typeof res.then === 'function') {
        return (async function* () {
            if (await res) {
                yield value;
            }
            for await (const entry of peekable) {
                if (await fn(entry)) {
                    yield entry;
                }
            }
        })();
    }
    const func = fn;
    return (function* () {
        if (res === true) {
            yield value;
        }
        for (const entry of peekable) {
            if (func(entry)) {
                yield entry;
            }
        }
    })();
}
export default filter;
//# sourceMappingURL=index.js.map